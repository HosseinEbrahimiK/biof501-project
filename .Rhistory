suppressPackageStartupMessages(library("Biobase"))
exprs.data <- as.tibble(exprs(gset))
exprs.data <- as_tibble(exprs(gset))
phenotype <- gset$description
phenotype
exprs.data %>% add_column(phenotype)
exprs.data %>% add_row(phenotype)
head(exprs.data)
c(phenotype)
c(exprs.data[10,])
tibble(c(exprs.data[2,], c(phenotype)))
q <- tibble(c(exprs.data[2,], c(phenotype)))
head(q)
god <- as.matrix(exprs.data[2,])
god
dim(god)
g <- t(god)
g
dim(g)
gg <- as.tibble(g)
gg <- as.tibble(g = "exprs")
gg <- as.tibble("exprs" = g)
gg <- tibble("exprs" = g)
gg
phenotype
ph <- tibble("phenotype"=gset$description)
ph
ff <- tibble(gg, ph)
ff
ff$exprs
gg <- tibble("exprs" = g[,1])
gg
ff <- tibble(gg, ph)
ff
exprs.data[2,][,1]
exprs.data[2,1]
p <- ff %>%
ggplot(aes(x=phenotype, y=exprs, color=phenotype)) +
geom_violin()
p
ff %>%
+ ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
+ geom_violin(trim = FALSE)
ff %>%ggplot(aes(x=phenotype, y=exprs, color=phenotype)) +
+ geom_violin()
ff %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white")+
scale_fill_brewer(palette="RdBu")+
theme_minimal()
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
gex <- tibble("exprs"=t(as.matrix(exprs.data[idx,]))[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
print(pre.gex)
return()
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- exprs(gset)
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
print(pre.gex)
return()
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
pre.gex <- exprs.data[idx,]
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- exprs(gset)
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
pre.gex <- exprs.data[idx,]
print(pre.gex)
return()
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- exprs(gset)
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
print(idx)
pre.gex <- exprs.data[idx,]
print(pre.gex)
return()
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl[[1]] == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("TYMS")
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
which(gene.symbl[[1]] == "TYMS")
which(gene.symbl == "TYMS")
id <- which(gene.symbl == "TYMS")
id
exprs.data[id,]
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("TYMS")
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
exprs.viz("aaaa")
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
ylab("gene expression")
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
ylab("gene expression") +
theme_minimal()
return(plot)
}
}
exprs.viz("DTL")
"aa" + "vv"
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
ylab("gene expression") +
theme_minimal() +
ggsave("results/gene_exprs.png")
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
ylab("gene expression") +
theme_minimal()
ggsave(plot, "results/gene_exprs.png")
return(plot)
}
}
exprs.viz("DTL")
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("Biobase"))
exprs.viz <- function(gene){
gset <- readRDS("data/ExpressionSet.Rds")
aml.up <- as.list(read.table("results/upregulated.txt"))
aml.down <- as.list(read.table("results/downregulated.txt"))
regulated <- append(aml.up[[1]], aml.down[[1]])
gene.symbl <- as.list(fData(gset)$`Gene symbol`)
exprs.data <- as_tibble(exprs(gset))
if(!any(regulated == gene))
stop("The input gene has not either down or up regulated!")
else{
idx <- which(gene.symbl == gene)
pre.gex <- t(as.matrix(exprs.data[idx,]))
gex <- tibble("exprs"=pre.gex[,1])
pht <- tibble("phenotype"=gset$description)
gdata <- tibble(gex, pht)
plot <- gdata %>%
ggplot(aes(x=phenotype, y=exprs, fill=phenotype)) +
geom_violin(trim = FALSE) +
geom_boxplot(width=0.1, fill="white") +
#scale_fill_brewer(palette="RdBu") +
ylab("gene expression") +
theme_minimal()
ggsave("results/gene_exprs.png")
return(plot)
}
}
exprs.viz("DTL")
install.packages("tidyverse")
install.packages("tidyverse")
